import { Context } from 'react';
import { Store, Atom, Action } from '@reatom/core';
export declare const context: Context<Store | null>;
export declare const Provider: import("react").Provider<Store | null>;
/**
 * @param ctx react context for your store.
 * @returns A `useAtom` hook bound to the context.
 */
export declare function createAtomHook(ctx?: Context<Store | null>): {
    <T>(atom: Atom<T>): T;
    <TI, TO = TI>(atom: Atom<TI>, selector: (atomValue: TI) => TO, deps: any[]): TO;
};
/**
 * @param atom target atom for subscription
 * @param selector (optional)
 * @param deps (optional)
 * @returns atom value
 */
export declare const useAtom: {
    <T>(atom: Atom<T>): T;
    <TI, TO = TI>(atom: Atom<TI>, selector: (atomValue: TI) => TO, deps: any[]): TO;
};
declare type AnyActionCreator = (...args: any[]) => Action<any> | void;
/**
 * @param ctx react context for your store.
 * @returns A `useAction` hook bound to the context.
 */
export declare function createActionHook(ctx?: Context<Store | null>): {
    <AC extends AnyActionCreator>(cb: AC, deps?: any[] | undefined): (...args: Parameters<AC>) => void;
    (cb: () => Action<any> | void, deps?: any[] | undefined): () => void;
    <T>(cb: (a: T) => Action<any> | void, deps?: any[] | undefined): (payload: T) => void;
};
/**
 * @param cb actionCreator (may return void for preventing dispatch)
 * @param deps
 */
export declare const useAction: {
    <AC extends AnyActionCreator>(cb: AC, deps?: any[] | undefined): (...args: Parameters<AC>) => void;
    (cb: () => Action<any> | void, deps?: any[] | undefined): () => void;
    <T>(cb: (a: T) => Action<any> | void, deps?: any[] | undefined): (payload: T) => void;
};
export {};
